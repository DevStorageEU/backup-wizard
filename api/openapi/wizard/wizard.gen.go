// Package wizard provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package wizard

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for DeviceKind.
const (
	Computer DeviceKind = "computer"
	Mobile   DeviceKind = "mobile"
	Server   DeviceKind = "server"
)

// Defines values for ProtectionStatus.
const (
	Error   ProtectionStatus = "error"
	Ok      ProtectionStatus = "ok"
	Warning ProtectionStatus = "warning"
)

// Device defines model for Device.
type Device struct {
	Agent      string             `json:"agent"`
	Id         openapi_types.UUID `json:"id"`
	Ips        []string           `json:"ips"`
	Kind       DeviceKind         `json:"kind"`
	LastBackup *time.Time         `json:"lastBackup,omitempty"`
	Name       string             `json:"name"`
	Protection ProtectionStatus   `json:"protection"`
}

// DeviceKind defines model for DeviceKind.
type DeviceKind string

// ProtectionStatus defines model for ProtectionStatus.
type ProtectionStatus string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /devices)
	GetDevices(ctx echo.Context) error

	// (POST /devices)
	PostDevices(ctx echo.Context) error

	// (GET /devices/{id})
	GetDevicesId(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDevices converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDevices(ctx)
	return err
}

// PostDevices converts echo context to params.
func (w *ServerInterfaceWrapper) PostDevices(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDevices(ctx)
	return err
}

// GetDevicesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDevicesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDevicesId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/devices", wrapper.GetDevices)
	router.POST(baseURL+"/devices", wrapper.PostDevices)
	router.GET(baseURL+"/devices/:id", wrapper.GetDevicesId)

}
